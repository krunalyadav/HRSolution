using System;
using System.Collections.Generic;

namespace ConsoleApp1
{
    class Program
    {
        static void Main(String[] args)
        {
            int testCases = Convert.ToInt32(Console.ReadLine());
            for (int j = 0; j < testCases; j++)
            {
                string[] temp = Console.ReadLine().Split(' ');
                int n = Convert.ToInt32(temp[0]);
                int m = Convert.ToInt32(temp[1]);
                Graph grapth = new Graph(n);
                for (int i = 0; i < m; i++)
                {
                    temp = Console.ReadLine().Split(' ');
                    grapth.AddEdge(Tuple.Create(Convert.ToInt32(temp[0]), Convert.ToInt32(temp[1])));
                }
                int l = Convert.ToInt32(Console.ReadLine());
                var algorithm = new Algorithms();
                algorithm.BFS(grapth, l);
                Console.WriteLine();
            }
            Console.Read();
        }
    }

    public class Graph
    {
        public int vertexCount;
        public Graph(int count)
        {
            vertexCount = count;
            for (int i = 1; i <= vertexCount; i++)
            {
                AdjacencyList[i] = new HashSet<int>();
            }
        }

        public Dictionary<int, HashSet<int>> AdjacencyList { get; } = new Dictionary<int, HashSet<int>>();

        public void AddEdge(Tuple<int, int> edge)
        {
            if (AdjacencyList.ContainsKey(edge.Item1) && AdjacencyList.ContainsKey(edge.Item2))
            {
                AdjacencyList[edge.Item1].Add(edge.Item2);
                AdjacencyList[edge.Item2].Add(edge.Item1);
            }
        }
    }

    public class Algorithms
    {
        public void BFS(Graph graph, int start)
        {
            var visited = new HashSet<int>();
            int[] ary = new int[graph.vertexCount + 1];

            var queue = new Queue<int>();
            queue.Enqueue(start);

            while (queue.Count > 0)
            {
                var vertex = queue.Dequeue();

                foreach (var neighbor in graph.AdjacencyList[vertex])
                {
                    if (!visited.Contains(neighbor))
                    {
                        queue.Enqueue(neighbor);
                        ary[neighbor] = (ary[vertex] + 6);
                        visited.Add(neighbor);                        
                    }
                }
            }

            for (int i = 1; i < ary.Length; i++)
            {
                if (i != start)
                {
                    if (ary[i] == 0)
                    {
                        Console.Write("-1 ");
                    }
                    else
                    {
                        Console.Write(ary[i] + " ");
                    }
                }
            }
        }
    }
}
