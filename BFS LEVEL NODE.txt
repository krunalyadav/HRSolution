using System;
using System.Collections.Generic;

namespace ConsoleApp1
{
    class Program
    {
        static void Main(String[] args)
        {
            int n = Convert.ToInt32(Console.ReadLine());
            Graph grapth = new Graph(n);
            for (int i = 0; i < n - 1; i++)
            {
                string[] temp = Console.ReadLine().Split(' ');
                grapth.AddEdge(Tuple.Create(Convert.ToInt32(temp[0]), Convert.ToInt32(temp[1])));
            }
            int l = Convert.ToInt32(Console.ReadLine());
            var algorithm = new Algorithms();
            Console.WriteLine(algorithm.BFS(grapth, 1, l));
            Console.Read();
        }
    }

    public class Graph
    {
        int vertexCount;
        public Graph(int count)
        {
            vertexCount = count;

            for (int i = 1; i <= vertexCount; i++)
            {
                AdjacencyList[i] = new HashSet<int>();
            }
        }

        public Dictionary<int, HashSet<int>> AdjacencyList { get; } = new Dictionary<int, HashSet<int>>();

        public void AddEdge(Tuple<int, int> edge)
        {
            if (AdjacencyList.ContainsKey(edge.Item1) && AdjacencyList.ContainsKey(edge.Item2))
            {
                AdjacencyList[edge.Item1].Add(edge.Item2);
                AdjacencyList[edge.Item2].Add(edge.Item1);
            }
        }
    }

    public class Algorithms
    {
        public int BFS(Graph graph, int start, int level)
        {
            int BFS_LEVEL = 1;

            var queue = new Queue<int>();
            var upperQueue = new Queue<int>();
            queue.Enqueue(start);
            queue.Enqueue(int.MinValue);

            while (queue.Count > 0)
            {
                var vertex = queue.Dequeue();
                if (vertex == int.MinValue)
                {
                    BFS_LEVEL++;
                    if (BFS_LEVEL == level)
                    {
                        return queue.Count;
                    }
                    vertex = queue.Dequeue();
                    if (vertex == int.MinValue) return 0;
                    queue.Enqueue(int.MinValue);
                    upperQueue.Enqueue(vertex);
                }
                else
                {
                    upperQueue.Enqueue(vertex);
                }

                foreach (var neighbor in graph.AdjacencyList[vertex])
                {
                    if (!upperQueue.Contains(neighbor))
                        queue.Enqueue(neighbor);
                }
            }


            return 0;
        }
    }
}


//http://www.koderdojo.com/blog/breadth-first-search-and-shortest-path-in-csharp-and-net-core